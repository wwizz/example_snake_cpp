diff --git a/CMake/OtherTests.cmake b/CMake/OtherTests.cmake
index 989f04e..ec1eb84 100644
--- a/CMake/OtherTests.cmake
+++ b/CMake/OtherTests.cmake
@@ -185,7 +185,7 @@ if(NOT APPLE)
   if(HAVE_SYS_POLL_H)
     set(CMAKE_REQUIRED_FLAGS "-DHAVE_SYS_POLL_H")
   endif(HAVE_SYS_POLL_H)
-  check_c_source_runs("
+  check_c_source_compiles("
     #ifdef HAVE_SYS_POLL_H
     #  include <sys/poll.h>
     #endif
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7b73b98..0764863 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -308,7 +308,7 @@ if(WIN32)
   cmake_dependent_option(CURL_WINDOWS_SSPI "Use windows libraries to allow NTLM authentication without openssl" ON
     CMAKE_USE_WINSSL OFF)
 endif()
-option(CMAKE_USE_MBEDTLS "Enable mbedTLS for SSL/TLS" OFF)
+option(CMAKE_USE_MBEDTLS "Enable mbedTLS for SSL/TLS" ON)
 
 set(openssl_default ON)
 if(WIN32 OR CMAKE_USE_DARWINSSL OR CMAKE_USE_WINSSL OR CMAKE_USE_MBEDTLS)
@@ -375,13 +375,13 @@ if(CMAKE_USE_OPENSSL)
   check_symbol_exists(RAND_egd    "${CURL_INCLUDES}" HAVE_RAND_EGD)
 endif()
 
-if(CMAKE_USE_MBEDTLS)
-  find_package(MbedTLS REQUIRED)
-  set(SSL_ENABLED ON)
-  set(USE_MBEDTLS ON)
-  list(APPEND CURL_LIBS ${MBEDTLS_LIBRARIES})
-  include_directories(${MBEDTLS_INCLUDE_DIRS})
-endif()
+if(USE_MBEDTLS)
+  if(CURL_WITH_MBEDTLS)
+    include_directories(${CURL_WITH_MBEDTLS}/include)
+    link_directories(${CURL_WITH_MBEDTLS}/lib)
+    link_libraries(mbedtls mbedx509 mbedcrypto)
+  endif(CURL_WITH_MBEDTLS)
+endif(USE_MBEDTLS)
 
 option(USE_NGHTTP2 "Use Nghttp2 library" OFF)
 if(USE_NGHTTP2)
@@ -895,7 +895,7 @@ else()
     check_function_exists(inet_pton HAVE_INET_PTON)
 endif()
 
-check_symbol_exists(fsetxattr "${CURL_INCLUDES}" HAVE_FSETXATTR)
+#check_symbol_exists(fsetxattr "${CURL_INCLUDES}" HAVE_FSETXATTR)
 if(HAVE_FSETXATTR)
   foreach(CURL_TEST HAVE_FSETXATTR_5 HAVE_FSETXATTR_6)
     curl_internal_test_run(${CURL_TEST})
@@ -978,9 +978,13 @@ foreach(CURL_TEST
     HAVE_GLIBC_STRERROR_R
     HAVE_POSIX_STRERROR_R
     )
-  curl_internal_test_run(${CURL_TEST})
+  curl_internal_test(${CURL_TEST})
 endforeach(CURL_TEST)
 
+if(HAVE_GLIBC_STRERROR_R)
+  set(HAVE_POSIX_STRERROR_R "")
+endif(HAVE_GLIBC_STRERROR_R)
+
 # Check for reentrant
 foreach(CURL_TEST
     HAVE_GETHOSTBYADDR_R_5
